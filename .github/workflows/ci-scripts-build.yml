# .github/workflows/ci-scripts-build.yml for use with EPICS Base ci-scripts
# (see: https://github.com/epics-base/ci-scripts)

# This is YAML - indentation levels are crucial

name: CAGateway

# Trigger on pushes and PRs to any branch
on:
  push:
    paths-ignore:
      - 'docs/*'
      - '.gitattributes'
      - '**.html'
      - '**.md'
  pull_request:
    paths-ignore:
      - 'docs/*'
      - '.gitattributes'
      - '**.html'
      - '**.md'

env:
  SETUP_PATH: .ci-local:.ci

jobs:
  build-base:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    # Set environment variables from matrix parameters
    env:
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
      SET: ${{ matrix.set }}

    strategy:
      fail-fast: false
      matrix:
        # Job names also name artifacts, character limitations apply
        include:
          - os: ubuntu-20.04
            cmp: gcc
            configuration: static
            extra: "CMD_CXXFLAGS=-std=c++11"
            set: "base-7.0"
            name: "B-7.0 Ub-20 gcc-9 C++11, static"

          - os: ubuntu-20.04
            cmp: gcc
            utoolchain: true
            utoolchain-install: "gcc-7 g++-7"
            configuration: default
            set: "base-7.0"
            name: "B-7.0 Ub-20 gcc-7"

          - os: ubuntu-20.04
            cmp: gcc-8
            utoolchain: true
            utoolchain-install: "gcc-8 g++-8"
            configuration: default
            set: "base-7.0"
            name: "B-7.0 Ub-20 gcc-8"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: default
            set: "base-7.0"
            name: "B-7.0 Ub-20 gcc-9"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: static
            set: "base-7.0"
            name: "B-7.0 Ub-20 gcc-9, static"

          - os: ubuntu-20.04
            cmp: clang
            configuration: default
            set: "base-7.0"
            name: "B-7.0 Ub-20 clang-10"

          - os: ubuntu-20.04
            cmp: clang
            configuration: default
            extra: "CMD_CXXFLAGS=-std=c++11"
            set: "base-7.0"
            name: "B-7.0 Ub-20 clang-10 C++11"

#          - os: macos-latest
#            cmp: clang
#            configuration: default
#            set: "base-7.0"
#            name: "B-7.0 MacOS clang-12"

          - os: windows-2019
            cmp: gcc
            configuration: default
            set: "base-7.0"
            name: "B-7.0 Win2019 MinGW"

#          - os: windows-2019
#            cmp: gcc
#            configuration: static
#            set: "base-7.0"
#            name: "B-7.0 Win2019 MinGW, static"

          - os: windows-2019
            cmp: vs2019
            configuration: default
            set: "base-7.0"
            name: "B-7.0 Win2019 MSC-19"

#          - os: windows-2019
#            cmp: vs2019
#            configuration: static
#            set: "base-7.0"
#            name: "B-7.0 Win2019 MSC-19, static"

#          - os: windows-2019
#            cmp: vs2019
#            configuration: debug
#            set: "base-7.0"
#            name: "B-7.0 Win2019 MSC-19, debug"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: default
            set: "base-3.15"
            name: "B-3.15 Ub-20 gcc-9"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: static
            set: "base-3.15"
            name: "B-3.15 Ub-20 gcc-9, static"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: default
            set: "base-3.14"
            name: "B-3.14 Ub-20 gcc-9"

          - os: ubuntu-20.04
            cmp: gcc
            configuration: static
            set: "base-3.14"
            name: "B-3.14 Ub-20 gcc-9, static"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Automatic core dumper analysis
      uses: mdavidsaver/ci-core-dumper@master
      with:
        extra_gdb: "info auto-load;thread apply all py-bt-full"
    - name: "apt-get install"
      run: |
        sudo apt-get update
        sudo apt-get -y install qemu-system-x86 g++-mingw-w64-x86-64 gdb python3-all-dbg
        sudo pip install pyepics nose nose-tap
      if: runner.os == 'Linux'
    - name: "apt-get install ${{ matrix.cmp }}"
      run: |
        sudo apt-get -y install software-properties-common
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get -y install ${{ matrix.utoolchain-install }}
      if: matrix.utoolchain
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py test
    - name: Upload tapfiles Artifact
      uses: actions/upload-artifact@v2
      with:
        name: tapfiles ${{ matrix.name }}
        path: '**/O.*/*.tap'
    - name: Collect and show test results
      run: python .ci/cue.py test-results
